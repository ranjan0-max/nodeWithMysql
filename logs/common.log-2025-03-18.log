{"level":"INFO","timestamp":"2025-03-18 15:38:02","message":"Request: [2025-03-18 15:38:02] GET:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:38:12","message":"Request: [2025-03-18 15:38:12] POST:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:40:06","message":"Request: [2025-03-18 15:40:06] POST:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:42:29","message":"Request: [2025-03-18 15:42:29] POST:/v1/user  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:43:15","message":"Request: [2025-03-18 15:43:15] POST:/v1/user  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 15:43:15","message":"\nInvalid `prisma.user.findUnique()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Controllers/user.controller.js:12:44\n\n   9 // Create a new user\n  10 const createUser = async (req, res) => {\n  11   try {\n→ 12     const existingUser = await prisma.user.findUnique({\n           where: {\n             email: undefined,\n         ?   id?: Int,\n         ?   userId?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   phoneNumber?: IntNullableFilter | Int | Null,\n         ?   refreshToken?: StringNullableFilter | String | Null,\n         ?   apiToken?: StringNullableFilter | String | Null,\n         ?   active?: BoolFilter | Boolean,\n         ?   isDeleted?: BoolFilter | Boolean,\n         ?   roleId?: IntFilter | Int,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   role?: RoleScalarRelationFilter | RoleWhereInput\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `userId` arguments. Available options are marked with ?. at createUser function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 15:52:59","message":"Request: [2025-03-18 15:52:59] POST:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:53:40","message":"Request: [2025-03-18 15:53:40] POST:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:54:56","message":"Request: [2025-03-18 15:54:56] POST:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:55:55","message":"Request: [2025-03-18 15:55:55] POST:/v1/auth/login  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:56:13","message":"Request: [2025-03-18 15:56:13] POST:/v1/user  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:56:58","message":"Request: [2025-03-18 15:56:58] GET:/v1/user  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:57:12","message":"Request: [2025-03-18 15:57:12] GET:/v1/user  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 15:57:12","message":"\nInvalid `prisma.user.findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Controllers/user.controller.js:35:40\n\n  32 // Get all users\n  33 const getUsers = async (req, res) => {\n  34   try {\n→ 35     const userList = await prisma.user.findMany({\n           include: {\n             role: true\n           },\n           where: {\n             auth_user_id: 2,\n             ~~~~~~~~~~~~\n             user_role: {\n               id: 1,\n               name: \"ADMIN\",\n               createdAt: \"2025-03-18T10:21:39.960Z\",\n               updatedAt: \"2025-03-18T10:21:39.960Z\"\n             },\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   id?: IntFilter | Int,\n         ?   name?: StringFilter | String,\n         ?   email?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   phoneNumber?: IntNullableFilter | Int | Null,\n         ?   refreshToken?: StringNullableFilter | String | Null,\n         ?   apiToken?: StringNullableFilter | String | Null,\n         ?   active?: BoolFilter | Boolean,\n         ?   isDeleted?: BoolFilter | Boolean,\n         ?   roleId?: IntFilter | Int,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   role?: RoleScalarRelationFilter | RoleWhereInput\n           }\n         })\n\nUnknown argument `auth_user_id`. Available options are marked with ?. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 15:58:01","message":"Request: [2025-03-18 15:58:01] GET:/v1/user  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 15:58:01","message":"\nInvalid `prisma.user.findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Controllers/user.controller.js:36:40\n\n  33 const getUsers = async (req, res) => {\n  34   try {\n  35     console.log(req.query);\n→ 36     const userList = await prisma.user.findMany({\n           include: {\n             role: true\n           },\n           where: {\n             auth_user_id: 2,\n             ~~~~~~~~~~~~\n             user_role: {\n               id: 1,\n               name: \"ADMIN\",\n               createdAt: \"2025-03-18T10:21:39.960Z\",\n               updatedAt: \"2025-03-18T10:21:39.960Z\"\n             },\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   id?: IntFilter | Int,\n         ?   name?: StringFilter | String,\n         ?   email?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   phoneNumber?: IntNullableFilter | Int | Null,\n         ?   refreshToken?: StringNullableFilter | String | Null,\n         ?   apiToken?: StringNullableFilter | String | Null,\n         ?   active?: BoolFilter | Boolean,\n         ?   isDeleted?: BoolFilter | Boolean,\n         ?   roleId?: IntFilter | Int,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   role?: RoleScalarRelationFilter | RoleWhereInput\n           }\n         })\n\nUnknown argument `auth_user_id`. Available options are marked with ?. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 15:58:53","message":"Request: [2025-03-18 15:58:53] GET:/v1/user  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 15:59:07","message":"Request: [2025-03-18 15:59:07] GET:/v1/user?id=1  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 15:59:07","message":"\nInvalid `prisma.user.findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Controllers/user.controller.js:38:40\n\n  35 delete req.query.auth_user_id;\n  36 delete req.query.user_role;\n  37 \n→ 38 const userList = await prisma.user.findMany({\n       include: {\n         role: true\n       },\n       where: {\n         id: \"1\"\n             ~~~\n       }\n     })\n\nArgument `id`: Invalid value provided. Expected IntFilter or Int, provided String. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 15:59:32","message":"Request: [2025-03-18 15:59:32] GET:/v1/user?id=1  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 15:59:32","message":"\nInvalid `prisma.user.findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Controllers/user.controller.js:40:40\n\n  37 \n  38 console.log(req.query);\n  39 \n→ 40 const userList = await prisma.user.findMany({\n       include: {\n         role: true\n       },\n       where: {\n         id: \"1\"\n             ~~~\n       }\n     })\n\nArgument `id`: Invalid value provided. Expected IntFilter or Int, provided String. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 15:59:53","message":"Request: [2025-03-18 15:59:53] GET:/v1/user?name=user  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:00:09","message":"Request: [2025-03-18 16:00:09] GET:/v1/user?name=user&email=user@gmail.com  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:00:12","message":"Request: [2025-03-18 16:00:12] GET:/v1/user?name=user&email=user@gmail.co  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:00:16","message":"Request: [2025-03-18 16:00:16] GET:/v1/user?name=user&email=user@gmail.com  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:00:29","message":"Request: [2025-03-18 16:00:29] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=2147483647  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 16:00:29","message":"\nInvalid `prisma.user.findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Controllers/user.controller.js:40:40\n\n  37 \n  38 console.log(req.query);\n  39 \n→ 40 const userList = await prisma.user.findMany({\n       include: {\n         role: true\n       },\n       where: {\n         name: \"user\",\n         email: \"user@gmail.com\",\n         phoneNumber: \"2147483647\"\n                      ~~~~~~~~~~~~\n       }\n     })\n\nArgument `phoneNumber`: Invalid value provided. Expected IntNullableFilter, Int or Null, provided String. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 16:03:38","message":"Request: [2025-03-18 16:03:38] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=2147483647  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 16:03:38","message":"Cannot read properties of undefined (reading 'findMany') at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 16:07:11","message":"Request: [2025-03-18 16:07:11] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=2147483647  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 16:07:11","message":"\nInvalid `prisma[model].findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Helpers/crud.helper.js:72:30\n\n  69 \n  70 // Find details with includes\n  71 async function findDetails(model, query, includes = []) {\n→ 72   return await prisma[model].findMany({\n         where: {\n           name: \"user\",\n           email: \"user@gmail.com\",\n           phoneNumber: \"2147483647\"\n                        ~~~~~~~~~~~~\n         },\n         include: undefined\n       })\n\nArgument `phoneNumber`: Invalid value provided. Expected IntNullableFilter, Int or Null, provided String. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 16:07:18","message":"Request: [2025-03-18 16:07:18] GET:/v1/user?name=user&email=user@gmail.com  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:09:41","message":"Request: [2025-03-18 16:09:41] GET:/v1/user?name=user&email=user@gmail.com  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:09:59","message":"Request: [2025-03-18 16:09:59] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=2147483647  ::ffff:127.0.0.1"},
{"level":"ERROR","timestamp":"2025-03-18 16:09:59","message":"\nInvalid `model.findMany()` invocation in\n/Users/abc/Desktop/nodeWithMysql-main/Helpers/crud.helper.js:72:22\n\n  69 \n  70 // Find details with includes\n  71 async function findDetails(model, query, includes = []) {\n→ 72   return await model.findMany({\n         where: {\n           name: \"user\",\n           email: \"user@gmail.com\",\n           phoneNumber: \"2147483647\"\n                        ~~~~~~~~~~~~\n         },\n         include: undefined\n       })\n\nArgument `phoneNumber`: Invalid value provided. Expected IntNullableFilter, Int or Null, provided String. at getUsers function user.controller"},
{"level":"INFO","timestamp":"2025-03-18 16:19:34","message":"Request: [2025-03-18 16:19:34] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=2147483647  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:19:40","message":"Request: [2025-03-18 16:19:40] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=214748364  ::ffff:127.0.0.1"},
{"level":"INFO","timestamp":"2025-03-18 16:19:43","message":"Request: [2025-03-18 16:19:43] GET:/v1/user?name=user&email=user@gmail.com&phoneNumber=2147483647  ::ffff:127.0.0.1"},
